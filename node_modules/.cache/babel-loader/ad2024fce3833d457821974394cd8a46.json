{"ast":null,"code":"var _jsxFileName = \"/Users/zal/Documents/Work/Personal/TicTacToe/tic-tac-toe/tic-tac-toe/src/components/game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Board from './board';\nimport Message from './message';\nimport Refresh from './refresh';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst isWon = board => {\n  // list of postion that is winning\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]]; // checking each of the postition seeing if the combination is there\n  // if it does return the True\n  // else return false\n\n  for (let i = 0; i < lines.length; i++) {\n    let [a, b, c] = lines[i]; //console.log(board[a] === board[b] && board[a] === board[c])\n\n    if (board[a] !== \"\" && board[a] === board[b] && board[a] === board[c]) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nconst Game = () => {\n  _s();\n\n  // this is for board\n  // default value for all the elemnt is \"\"\n  const [board, setBoard] = useState(Array(9).fill(\"\")); // first player is \"X\"\n  // if the game is over put \"\" as player\n\n  const [isPlayer, setIsPlayer] = useState(\"X\");\n  const [message, setMessage] = useState(\"Click to Start\");\n\n  const refresh = () => {\n    setBoard(Array(9).fill(\"\"));\n    setMessage(\"Click to start\");\n    setIsPlayer(\"X\");\n  };\n\n  const handleInput = pos => {\n    if (isPlayer === \"\" || board[pos] !== \"\") {\n      //is the game is over don't play\n      // if the box has been clocked already then return\n      return;\n    }\n\n    const boardCopy = [...board];\n    boardCopy[pos] = isPlayer;\n    setBoard(boardCopy); // updating board for current player  \n\n    if (isWon(boardCopy)) {\n      // once game is over\n      setMessage(`WON: ${isPlayer}`); // since the game is over putting \"\" \n\n      setIsPlayer(\"\");\n      return;\n    }\n\n    if (boardCopy.indexOf(\"\") === -1) {\n      // if no more moves game is draw\n      setMessage(\"DRAW\");\n      setIsPlayer(\"\");\n    } else {\n      let nextPlayer = isPlayer === \"X\" ? \"O\" : \"X\";\n      setIsPlayer(nextPlayer); // updating player\n\n      setMessage(`TURN: ${nextPlayer}`);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Message, {\n      value: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      onClick: handleInput,\n      value: board\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Refresh, {\n      onClick: refresh,\n      value: 'Refresh'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 13\n  }, this);\n};\n\n_s(Game, \"rBf/XOha7BLRGGuvsK5EzLf5g8M=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/zal/Documents/Work/Personal/TicTacToe/tic-tac-toe/tic-tac-toe/src/components/game.js"],"names":["React","useState","Board","Message","Refresh","isWon","board","lines","i","length","a","b","c","Game","setBoard","Array","fill","isPlayer","setIsPlayer","message","setMessage","refresh","handleInput","pos","boardCopy","indexOf","nextPlayer"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AAEA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,OAAP,MAAoB,WAApB;;;AAIA,MAAMC,KAAK,GAAIC,KAAD,IAAW;AACrB;AACA,QAAMC,KAAK,GAAG,CACV,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADU,EAEV,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFU,EAGV,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHU,EAIV,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAJU,EAKV,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CALU,EAMV,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CANU,EAOV,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAPU,EAQV,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CARU,CAAd,CAFqB,CAYrB;AACA;AACA;;AACA,OAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAED,KAAK,CAACE,MAAvB,EAA+BD,CAAC,EAAhC,EAAoC;AAChC,QAAI,CAACE,CAAD,EAAIC,CAAJ,EAAOC,CAAP,IAAYL,KAAK,CAACC,CAAD,CAArB,CADgC,CAEhC;;AACA,QAAIF,KAAK,CAACI,CAAD,CAAL,KAAW,EAAX,IAAgBJ,KAAK,CAACI,CAAD,CAAL,KAAaJ,KAAK,CAACK,CAAD,CAAlC,IAAyCL,KAAK,CAACI,CAAD,CAAL,KAAaJ,KAAK,CAACM,CAAD,CAA/D,EAAoE;AAChE,aAAO,IAAP;AACH;AACJ;;AACD,SAAO,KAAP;AACH,CAvBD;;AA0BA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACf;AACA;AACA,QAAM,CAACP,KAAD,EAAQQ,QAAR,IAAoBb,QAAQ,CAACc,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,EAAd,CAAD,CAAlC,CAHe,CAIf;AACA;;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BjB,QAAQ,CAAC,GAAD,CAAxC;AACA,QAAM,CAACkB,OAAD,EAAUC,UAAV,IAAwBnB,QAAQ,CAAC,gBAAD,CAAtC;;AAIA,QAAMoB,OAAO,GAAI,MAAM;AACnBP,IAAAA,QAAQ,CAACC,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,EAAd,CAAD,CAAR;AACAI,IAAAA,UAAU,CAAC,gBAAD,CAAV;AACAF,IAAAA,WAAW,CAAC,GAAD,CAAX;AACH,GAJD;;AAOA,QAAMI,WAAW,GAAIC,GAAD,IAAS;AACzB,QAAIN,QAAQ,KAAK,EAAb,IAAmBX,KAAK,CAACiB,GAAD,CAAL,KAAe,EAAtC,EAA0C;AACtC;AACA;AACA;AACH;;AAED,UAAMC,SAAS,GAAG,CAAC,GAAGlB,KAAJ,CAAlB;AACAkB,IAAAA,SAAS,CAACD,GAAD,CAAT,GAAiBN,QAAjB;AACAH,IAAAA,QAAQ,CAACU,SAAD,CAAR,CATyB,CASJ;;AAGrB,QAAInB,KAAK,CAACmB,SAAD,CAAT,EAAqB;AACjB;AACAJ,MAAAA,UAAU,CAAE,QAAOH,QAAS,EAAlB,CAAV,CAFiB,CAGjB;;AACAC,MAAAA,WAAW,CAAC,EAAD,CAAX;AACA;AACH;;AAED,QAAIM,SAAS,CAACC,OAAV,CAAkB,EAAlB,MAAyB,CAAC,CAA9B,EAAgC;AAC5B;AACAL,MAAAA,UAAU,CAAC,MAAD,CAAV;AACAF,MAAAA,WAAW,CAAC,EAAD,CAAX;AACH,KAJD,MAIO;AACH,UAAIQ,UAAU,GAAIT,QAAQ,KAAK,GAAd,GAAqB,GAArB,GAA2B,GAA5C;AACAC,MAAAA,WAAW,CAACQ,UAAD,CAAX,CAFG,CAEsB;;AACzBN,MAAAA,UAAU,CAAE,SAAQM,UAAW,EAArB,CAAV;AACH;AACJ,GA7BD;;AA+BA,sBAAQ;AAAA,4BACC,QAAC,OAAD;AAAS,MAAA,KAAK,EAAEP;AAAhB;AAAA;AAAA;AAAA;AAAA,YADD,eAEA,QAAC,KAAD;AAAO,MAAA,OAAO,EAAEG,WAAhB;AAA6B,MAAA,KAAK,EAAEhB;AAApC;AAAA;AAAA;AAAA;AAAA,YAFA,eAGA,QAAC,OAAD;AAAS,MAAA,OAAO,EAAEe,OAAlB;AAA2B,MAAA,KAAK,EAAE;AAAlC;AAAA;AAAA;AAAA;AAAA,YAHA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAR;AAKH,CAtDD;;GAAMR,I;;KAAAA,I;AAwDN,eAAeA,IAAf","sourcesContent":["import React, { useState } from 'react'\nimport Board from './board'\n\nimport Message from './message'\nimport Refresh from './refresh'\n\n\n\nconst isWon = (board) => {\n    // list of postion that is winning\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n    // checking each of the postition seeing if the combination is there\n    // if it does return the True\n    // else return false\n    for (let i=0; i< lines.length; i++) {\n        let [a, b, c] = lines[i];\n        //console.log(board[a] === board[b] && board[a] === board[c])\n        if (board[a]!==\"\" &&board[a] === board[b] && board[a] === board[c]) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\nconst Game = () => {\n    // this is for board\n    // default value for all the elemnt is \"\"\n    const [board, setBoard] = useState(Array(9).fill(\"\")); \n    // first player is \"X\"\n    // if the game is over put \"\" as player\n    const [isPlayer, setIsPlayer] = useState(\"X\");\n    const [message, setMessage] = useState(\"Click to Start\");\n  \n\n\n    const refresh  = () => {\n        setBoard(Array(9).fill(\"\")); \n        setMessage(\"Click to start\");\n        setIsPlayer(\"X\");  \n    }\n \n\n    const handleInput = (pos) => {    \n        if (isPlayer === \"\" || board[pos] !== \"\") {\n            //is the game is over don't play\n            // if the box has been clocked already then return\n            return;\n        }\n       \n        const boardCopy = [...board];\n        boardCopy[pos] = isPlayer;\n        setBoard(boardCopy); // updating board for current player  \n        \n\n        if (isWon(boardCopy)){\n            // once game is over\n            setMessage(`WON: ${isPlayer}`)\n            // since the game is over putting \"\" \n            setIsPlayer(\"\");\n            return;\n        }\n\n        if (boardCopy.indexOf(\"\")=== -1){\n            // if no more moves game is draw\n            setMessage(\"DRAW\")\n            setIsPlayer(\"\");\n        } else {\n            let nextPlayer = (isPlayer === \"X\") ? \"O\" : \"X\"\n            setIsPlayer(nextPlayer); // updating player\n            setMessage(`TURN: ${nextPlayer}`)\n        }\n    }\n\n    return (<div>\n             <Message value={message} />\n            <Board onClick={handleInput} value={board} /> \n            <Refresh onClick={refresh} value={'Refresh'} />\n        </div>)\n}\n\nexport default Game"]},"metadata":{},"sourceType":"module"}